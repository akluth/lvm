#!/usr/bin/perl
#
# This is the assembler for lauravm.
# And yeah, it's buggy, it's not failure-proof.
#
# use strict;
# use warnings FATAL => 'all';
use Getopt::Long;
use List::Util qw(first);
use Data::Dumper qw(Dumper);
use Scalar::Util qw(looks_like_number);

my %header = (
    MAGIC   => 'laura',
    NULL    => 0x0,
    VERSION => 0xC1,
    PADDING => 0xFE
);

my %instructions = (
    NOP  => 0x00,
    SET  => 0x02,
    PUSH => 0x03,
    POP  => 0x04,
    HLT  => 0x05,
    MOV  => 0x06,
    MOVA => 0x6a,
    MOVB => 0x6b,
    UFF  => 0xFF
);

my %mov_instr = (
    MOVA => 0x6A,
    MOVB => 0x6B
);

my $outfile;
my $debug;
GetOptions(
    "outfile=s" => \$outfile,
    "debug"     => \$debug
);

if (!defined $outfile) {
    die "error: no input file\n";
}

open(my $in, '<', $ARGV[0]) or die "OPENING $ARGV[0]: $!\n";
open my $out, '>:raw', $outfile or die;

print $out pack('a5', $header{'MAGIC'});
print $out pack('C', $header{'NULL'});
print $out pack('C', $header{'VERSION'});
print $out pack('C', $header{'PADDING'});

while (my $line = <$in>) {
    chomp $line;

    my $semicolon = index($line, ';');
    if ($semicolon >= 1) {
        $line = substr($line, 0, $semicolon);
    } elsif ($semicolon == 0) {
        next;
    }

    my @tokens = split / /, $line;
    print Dumper \@tokens if defined $debug;
    my $value_after_instruction = 0;
    my $is_move_instr = 0;

    for my $i (0 .. $#tokens) {
        $tokens[$i] =~ s/,+$//;
        $tokens[$i] = uc $tokens[$i] unless looks_like_number($tokens[$i]);

        if ($value_after_instruction == 1 && (looks_like_number($tokens[$i]) || $tokens[$i] == 0)) {
            print $out pack('I<', $tokens[$i]);
            $value_after_instruction = 0;
        } elsif ($is_move_instr == 1) {
            print $out pack('I<', $tokens[++$i]);
            $is_move_instr = 0;
        } elsif (exists($instructions{$tokens[$i]})) {
            if ($tokens[$i] eq 'MOV') {
                $i++;
                $tokens[$i] =~ s/,+$//;
                $tokens[$i] = uc $tokens[$i] unless looks_like_number($tokens[$i]);

                my $mov = $tokens[$i];
                if ($mov =~ 'EAX') {
                    print $out pack('C', $mov_instr{'MOVA'});
                }
                if ($mov =~ 'EBX') {
                    print $out pack('C', $mov_instr{'MOVB'});
                }
                $is_move_instr = 1;
            } else {
                print $out pack('C', $instructions{$tokens[$i]});
                $value_after_instruction = 1;
            }
        }
    }
}

close $in;
close $out;