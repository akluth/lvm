#!/usr/bin/perl
use strict;
use warnings FATAL => 'all';
use Getopt::Long;
use List::Util qw(first);
use Data::Dumper qw(Dumper);
use Scalar::Util qw(looks_like_number);

my %header = (
    MAGIC   => 'bupi',
    NULL    => 0x0,
    VERSION => 0xC1,
    PADDING => 0xFE
);

my %instructions = (
    NOP  => 0x00,
    SET  => 0x02,
    PUSH => 0x03,
    POP  => 0x04,
    HLT  => 0x05,
    MOV  => 0x06,
    UFF  => 0xFF
);

my $outfile;
my $debug;
GetOptions(
    "outfile=s" => \$outfile,
    "debug"     => \$debug
);

if (!defined $outfile) {
    die "error: no input file\n";
}

open(my $in, '<', $ARGV[0]) or die "OPENING $ARGV[0]: $!\n";
open my $out, '>:raw', $outfile or die;

print $out pack('a4', $header{'MAGIC'});
print $out pack('C', $header{'NULL'});
print $out pack('C', $header{'VERSION'});
print $out pack('C', $header{'PADDING'});

while (my $line = <$in>) {
    chomp $line;

    my $semicolon = index($line, ';');

    if ($semicolon >= 1) {
        $line = substr($line, 0, $semicolon);
    } elsif ($semicolon == 0) {
        next;
    }

    my @tokens = split / /, $line;
    print Dumper \@tokens if defined $debug;

    while (my $token = shift @tokens) {
        $token =~ s/,+$//;
        $token = uc $token;

        if (looks_like_number($token)) {
            print $out pack('i<', $token);
        } elsif (exists($instructions{$token})) {
            print $out pack('C', $instructions{$token});
        }
    }
}

close $in;
close $out;